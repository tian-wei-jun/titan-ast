package titan.ast.impl.ast.contextast;

public interface Visitor {
  void visit(ContextAst contextAst);
  void visitChildren(ContextAst contextAst);
  void visitTerminalContextAst(TerminalContextAst terminalContextAst);
  void visitStartGrammarAst(StartGrammarAst startGrammarAst);
  void visitGrammarUnitRegExpAst(GrammarUnitRegExpAst grammarUnitRegExpAst);
  void visitSequenceCharsUnitRegExpAst(SequenceCharsUnitRegExpAst sequenceCharsUnitRegExpAst);
  void visitOneCharOptionCharsetUnitRegExpAst(OneCharOptionCharsetUnitRegExpAst oneCharOptionCharsetUnitRegExpAst);
  void visitParenthesisUnitRegExpAst(ParenthesisUnitRegExpAst parenthesisUnitRegExpAst);
  void visitUnitRegExpAst(UnitRegExpAst unitRegExpAst);
  void visitAndCompositeRegExpAst(AndCompositeRegExpAst andCompositeRegExpAst);
  void visitExclusiveOrCompositeRegExpAst(ExclusiveOrCompositeRegExpAst exclusiveOrCompositeRegExpAst);
  void visitInclusiveOrCompositeRegExpAst(InclusiveOrCompositeRegExpAst inclusiveOrCompositeRegExpAst);
  void visitGrammarAttributeAst(GrammarAttributeAst grammarAttributeAst);
  void visitGrammarAttributesAst(GrammarAttributesAst grammarAttributesAst);
  void visitGrammarActionAst(GrammarActionAst grammarActionAst);
  void visitRegExpGrammarAst(RegExpGrammarAst regExpGrammarAst);
  void visitTerminalFragmentGrammarBeginningAst(TerminalFragmentGrammarBeginningAst terminalFragmentGrammarBeginningAst);
  void visitTerminalFragmentGrammarEndAst(TerminalFragmentGrammarEndAst terminalFragmentGrammarEndAst);
  void visitTerminalFragmentGrammarBlockAst(TerminalFragmentGrammarBlockAst terminalFragmentGrammarBlockAst);
  void visitTerminalGrammarBeginningAst(TerminalGrammarBeginningAst terminalGrammarBeginningAst);
  void visitTerminalGrammarEndAst(TerminalGrammarEndAst terminalGrammarEndAst);
  void visitNfaTerminalGrammarAst(NfaTerminalGrammarAst nfaTerminalGrammarAst);
  void visitTerminalGrammarAst(TerminalGrammarAst terminalGrammarAst);
  void visitTerminalGrammarBlockAst(TerminalGrammarBlockAst terminalGrammarBlockAst);
  void visitDerivedTerminalGrammarBeginningAst(DerivedTerminalGrammarBeginningAst derivedTerminalGrammarBeginningAst);
  void visitDerivedTerminalGrammarEndAst(DerivedTerminalGrammarEndAst derivedTerminalGrammarEndAst);
  void visitDerivedTerminalGrammarBlockAst(DerivedTerminalGrammarBlockAst derivedTerminalGrammarBlockAst);
  void visitNonterminalGrammarBeginningAst(NonterminalGrammarBeginningAst nonterminalGrammarBeginningAst);
  void visitNonterminalGrammarEndAst(NonterminalGrammarEndAst nonterminalGrammarEndAst);
  void visitNonterminalGrammarBlockAst(NonterminalGrammarBlockAst nonterminalGrammarBlockAst);
  void visitItemAst(ItemAst itemAst);
  void visitCompilationUnitAst(CompilationUnitAst compilationUnitAst);
  void visitIdentifierAst(IdentifierAst identifierAst);
}