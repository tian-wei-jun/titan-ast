package titan.ast.impl.ast.contextast;

public interface Visitor {
  void visit(ContextAst contextAst);
  void visitChildren(ContextAst contextAst);
  void visitTerminalContextAst(TerminalContextAst terminalContextAst);
  void visitStartGrammarAst(StartGrammarAst startGrammarAst);
  void visitGrammarUnitRegExpAst(GrammarUnitRegExpAst grammarUnitRegExpAst);
  void visitSequenceCharsUnitRegExpAst(SequenceCharsUnitRegExpAst sequenceCharsUnitRegExpAst);
  void visitOneCharOptionCharsetUnitRegExpAst(OneCharOptionCharsetUnitRegExpAst oneCharOptionCharsetUnitRegExpAst);
  void visitParenthesisTerminalGrammarUnitRegExpAst(ParenthesisTerminalGrammarUnitRegExpAst parenthesisTerminalGrammarUnitRegExpAst);
  void visitTerminalGrammarUnitRegExpAst(TerminalGrammarUnitRegExpAst terminalGrammarUnitRegExpAst);
  void visitTerminalGrammarCompositeRegExpAst(TerminalGrammarCompositeRegExpAst terminalGrammarCompositeRegExpAst);
  void visitTerminalFragmentGrammarBeginningAst(TerminalFragmentGrammarBeginningAst terminalFragmentGrammarBeginningAst);
  void visitTerminalFragmentGrammarEndAst(TerminalFragmentGrammarEndAst terminalFragmentGrammarEndAst);
  void visitTerminalFragmentGrammarAst(TerminalFragmentGrammarAst terminalFragmentGrammarAst);
  void visitTerminalFragmentGrammarBlockAst(TerminalFragmentGrammarBlockAst terminalFragmentGrammarBlockAst);
  void visitTerminalGrammarBeginningAst(TerminalGrammarBeginningAst terminalGrammarBeginningAst);
  void visitTerminalGrammarEndAst(TerminalGrammarEndAst terminalGrammarEndAst);
  void visitTerminalGrammarActionAst(TerminalGrammarActionAst terminalGrammarActionAst);
  void visitNfaTerminalGrammarAttributesAst(NfaTerminalGrammarAttributesAst nfaTerminalGrammarAttributesAst);
  void visitRegExpTerminalGrammarAttributesAst(RegExpTerminalGrammarAttributesAst regExpTerminalGrammarAttributesAst);
  void visitNfaTerminalGrammarAst(NfaTerminalGrammarAst nfaTerminalGrammarAst);
  void visitRegExpTerminalGrammarAst(RegExpTerminalGrammarAst regExpTerminalGrammarAst);
  void visitTerminalGrammarAst(TerminalGrammarAst terminalGrammarAst);
  void visitTerminalGrammarBlockAst(TerminalGrammarBlockAst terminalGrammarBlockAst);
  void visitDerivedTerminalGrammarBeginningAst(DerivedTerminalGrammarBeginningAst derivedTerminalGrammarBeginningAst);
  void visitDerivedTerminalGrammarEndAst(DerivedTerminalGrammarEndAst derivedTerminalGrammarEndAst);
  void visitDerivedTerminalGrammarCompositeRegExpAst(DerivedTerminalGrammarCompositeRegExpAst derivedTerminalGrammarCompositeRegExpAst);
  void visitDerivedTerminalGrammarAst(DerivedTerminalGrammarAst derivedTerminalGrammarAst);
  void visitDerivedTerminalGrammarBlockAst(DerivedTerminalGrammarBlockAst derivedTerminalGrammarBlockAst);
  void visitNonterminalGrammarBeginningAst(NonterminalGrammarBeginningAst nonterminalGrammarBeginningAst);
  void visitNonterminalGrammarEndAst(NonterminalGrammarEndAst nonterminalGrammarEndAst);
  void visitParenthesisNonterminalGrammarUnitRegExpAst(ParenthesisNonterminalGrammarUnitRegExpAst parenthesisNonterminalGrammarUnitRegExpAst);
  void visitNonterminalGrammarUnitRegExpAst(NonterminalGrammarUnitRegExpAst nonterminalGrammarUnitRegExpAst);
  void visitNonterminalGrammarCompositeRegExpAst(NonterminalGrammarCompositeRegExpAst nonterminalGrammarCompositeRegExpAst);
  void visitProductionRuleAst(ProductionRuleAst productionRuleAst);
  void visitProductionRulesAst(ProductionRulesAst productionRulesAst);
  void visitNonterminalGrammarAst(NonterminalGrammarAst nonterminalGrammarAst);
  void visitNonterminalGrammarBlockAst(NonterminalGrammarBlockAst nonterminalGrammarBlockAst);
  void visitItemAst(ItemAst itemAst);
  void visitCompilationUnitAst(CompilationUnitAst compilationUnitAst);
  void visitIdentifierAst(IdentifierAst identifierAst);
}